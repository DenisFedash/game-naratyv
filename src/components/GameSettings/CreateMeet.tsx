"use client";

import { useEffect, useState } from "react";
import Link from "next/link";

let tokenClient: any;
let gapiInited = false;
let gisInited = false;

export const CreateMeet = () => {
  const [eventLink, setEventLink] = useState("");

  useEffect(() => {
    gapi.load("client", initializeGapiClient);
    tokenClient = google.accounts.oauth2.initTokenClient({
      client_id: process.env.CLIENT_ID,
      scope: process.env.SCOPES,
      callback: "", 
    });
    gisInited = true;
  }, []);

  async function initializeGapiClient() {
    await gapi.client.init({
      apiKey: process.env.API_KEY,
      discoveryDocs: [process.env.DISCOVERY_DOC],
    });
    gapiInited = true;
  }

  async function createGoogleMeetEvent() {
    if (!gisInited) {
      console.error("Token client is not initialized");
      return;
    }
    tokenClient.callback = async (resp: any) => {
      if (resp.error !== undefined) {
        throw resp;
      }
      const eventDetails = {
        summary: "Google Meet Event",
        description: "Generated by button click",
        start: new Date().toISOString(),
        end: new Date(Date.now() + 3600000).toISOString(), 
      };
      const link = await scheduleEvent(eventDetails);
      setEventLink(link);
    };
    if (gapi.client.getToken() === null) {
      tokenClient.requestAccessToken({ prompt: "consent" });
    } else {
      tokenClient.requestAccessToken({ prompt: " " });
    }
  }

  async function scheduleEvent(eventDetails: any) {
    const event = {
      summary: eventDetails.summary,
      description: eventDetails.description,
      start: {
        dateTime: eventDetails.start,
        timeZone: "Etc/UTC",
      },
      end: {
        dateTime: eventDetails.end,
        timeZone: "Etc/UTC",
      },
      conferenceData: {
        createRequest: {
          requestId: Math.random().toString(36).substring(2),
          conferenceSolutionKey: {
            type: "hangoutsMeet",
          },
        },
      },
    };
    const request = (gapi.client as any).calendar.events.insert({
      calendarId: "primary",
      resource: event,
      conferenceDataVersion: 1,
    });
    const response = await request.execute();
    if (response && response.hangoutLink) {
      return response.hangoutLink;
    } else {
      throw new Error("Failed to create Google Meet event");
    }
  }

  return (
    <div>
      <button onClick={createGoogleMeetEvent}>Створити Google Meet</button>
      {eventLink && (
        <div>
          <Link href={eventLink} target="_blank" rel="noopener noreferrer">
            Посилання на подію
          </Link>
          <button onClick={() => navigator.clipboard.writeText(eventLink)}>
            Копіювати посилання
          </button>
        </div>
      )}
    </div>
  );
}





